// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target i386-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name SuperBotSDK
import Foundation
import SafariServices
@_exported import SuperBotSDK
import Swift
import UIKit
import WebKit
@objc open class FloatyManager : ObjectiveC.NSObject {
  open var button: SuperBotSDK.Floaty {
    get
  }
  @objc override dynamic public init()
  open var font: UIKit.UIFont {
    get
    set(newValue)
  }
  open var rtlMode: Swift.Bool {
    get
    set(newValue)
  }
  @objc deinit
}
@objc open class SuperBot : ObjectiveC.NSObject {
  public static var sharedInstance: SuperBotSDK.SuperBot
  @objc open func configure(AccountKey: Swift.String, SecretKey: Swift.String)
  @objc open func showBot(on viewController: UIKit.UIViewController)
  @objc open func hideBot()
  @objc deinit
}
@objc @IBDesignable open class Floaty : UIKit.UIView {
  @objc open var size: CoreGraphics.CGFloat {
    @objc get
    @objc set(newValue)
  }
  @objc open var paddingX: CoreGraphics.CGFloat {
    @objc get
    @objc set(newValue)
  }
  @objc open var paddingY: CoreGraphics.CGFloat {
    @objc get
    @objc set(newValue)
  }
  @IBInspectable @objc open var relativeToSafeArea: Swift.Bool
  @objc @IBInspectable open var buttonColor: UIKit.UIColor
  @objc @IBInspectable open var bannerTxtColor: UIKit.UIColor
  @objc @IBInspectable open var buttonHighlightedColor: UIKit.UIColor?
  @objc @IBInspectable open var buttonShadowColor: UIKit.UIColor
  @objc @IBInspectable open var buttonImage: UIKit.UIImage? {
    @objc get
    @objc set(newValue)
  }
  @objc @IBInspectable open var overlayColor: UIKit.UIColor
  @objc @IBInspectable open var hasShadow: Swift.Bool
  @objc open var hasBanner: Swift.Bool
  @objc open var bannerTitleText: Swift.String
  @objc open var bannerSubTitleText: Swift.String
  @objc @IBInspectable open var respondsToKeyboard: Swift.Bool
  @objc open var friendlyTap: Swift.Bool
  @objc open var sticky: Swift.Bool
  @IBInspectable @objc open var supportLanscape: Swift.Bool
  @objc open var global: SuperBotSDK.FloatyManager {
    @objc get
  }
  @objc open var closed: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public init()
  public init(size: CoreGraphics.CGFloat)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func draw(_ rect: CoreGraphics.CGRect)
  @objc deinit
  @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc override dynamic open func willMove(toSuperview newSuperview: UIKit.UIView?)
  @objc override dynamic open func didMoveToSuperview()
}
extension Floaty {
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open var accessibilityLabel: Swift.String? {
    @objc get
    @objc set(newLabel)
  }
  @objc override dynamic open var accessibilityHint: Swift.String? {
    @objc get
    @objc set(newHint)
  }
  @objc override dynamic open var accessibilityValue: Swift.String? {
    @objc get
    @objc set(newHint)
  }
}
@objc open class FloatyViewController : UIKit.UIViewController {
  final public let floaty: SuperBotSDK.Floaty
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
